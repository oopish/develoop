Main
====

@todo describe


#### The main class for Pegdev

    class Main
      C: ªC
      toString: -> "[object #{@C}]"

      constructor: (config={}) ->




Properties
----------


#### `pegjs <xx>`
Xx. @todo describe

        @pegjs = PEG




#### `pegRules <array of PegRules>`
Xx. @todo describe

        @pegRules = []




Init
----

Initialize the instance. 

        @init()




Methods
-------


#### `init()`

Xx. @todo describe

      init: ->
        @pegRules.push new PegRule
          label:       'all_a'
          humanName:   'all "A" and "a"'
          initializer: 'var a = 1;'
          rule:        "  = ('A' / 'a')+\n  / all_b"
        @pegRules.push new PegRule
          label:       'all_b'
          humanName:   'all "B" and "b"'
          initializer: 'var b = 2;'
          rule:        "  = ('B' / 'b')+"




#### `render()`

Xx. @todo describe

      render: ->

Count the number of inert rules. 

        inertTally = 0
        for rule in @pegRules then if rule.inert then inertTally++

Show the initializer. 

        out = ["//// Generated by #{ªC} #{ªV}\n\n"]
        if 0 == @pegRules.length or @pegRules.length == inertTally
          out.push "//// No initializer needed. \n\n"
        else
          out.push "//// Begin initializer. \n\n{"
          out = out.concat(rule.getInitializer() for rule in @pegRules)
          out.push '} // end initializer\n\n'

Show the active rules, if any. 

        if 0 == @pegRules.length
          out.push "//// No rules have been defined. \n"
          out.push "start = ''"
        else if @pegRules.length == inertTally
          out.push "//// The #{@pegRules.length} rules are inert. \n"
          out.push "start = ''"
        else
          out.push "//// Begin rules. \n"
          out = out.concat(rule.getRule() for rule in @pegRules)
          out.push "\n\n//// #{@pegRules.length} rules, #{inertTally} inert. \n"

Return the result as a string. 

        out.join('\n') + '\n\n'




Functions
---------


#### `xx()`
- `xx <xx>`  Xx 

Xx. @todo describe

    xx = (xx) ->



